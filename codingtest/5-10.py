# 5-10 [실전 문제] 음료수 얼려 먹기
# 난이도 1.5/3.0  | 풀이 시간 30분 | 시간 제한 1초 | 메모리 제한 128MB

# N x M 크기의 얼음 틀이 있다. 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시된다.
# 구멍이 뚫려 있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주한다.
# 이때 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성하시오.
# 다음의 4 x 5 얼음 틀 예시에서는 아이스크림이 총 3개 생성된다.

# 00110
# 00011
# 11111
# 00000


# 입력 조건
    # 첫 번째 줄에 얼음 틀의 세로 길이 N과 가로 길이M이 주어진다.(1 <= N, M <= 1000)
    # 두 번째 줄부터 N + 1번째 줄 까지 얼음 틀의 형태가 주어진다.
    # 이때 구멍이 뚫려 있는 부분은 0, 그렇지 않은 부분은 1이다.

# 출력 조건
    # 한 번에 만들 수 있는 아이스크림의 개수를 출력한다.


# 입력 예시
    # 15 14
    # 00000111100000
    # 11111101111110
    # 11011101101110
    # 11011101100000
    # 11011111111111
    # 11011111111100
    # 11000000011111
    # 01111111111111
    # 00000000011111
    # 01111111111000
    # 00011111111000
    # 00000001111000
    # 11111111110011
    # 11100011111111
    # 11100011111111

# 출력 예시
    # 8

from collections import deque

n, m = map(int, input().split())

dw = [0, 1, 0, -1]
dh = [-1,0,1,0]


icetray = []
for i in range(n):
    icetray.append(list(map(int, input())))

def dfs(x, y):  #특정 노드 방문 후 사방 탐색
    if(x <= -1 or x >= n or y <= -1 or y >=m):
        return False
    
    if icetray[x][y] == 0:
        icetray[x][y] = 1
        dfs(x-1, y)
        dfs(x, y-1)
        dfs(x+1, y)
        dfs(x, y+1)
        return True
    return False

count = 0

for i in range(n):
    for j in range(m):
        if dfs(i, j) == True:
            count+=1

print(count)

