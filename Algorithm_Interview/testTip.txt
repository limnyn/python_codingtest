str형식이 숫자인 경우 판별은 .isdigit() 사용

파이썬 재귀호출 촤대 1000번제한,
    해제는 sys.getrecursionlimit()
다익스트라와 최소힙
https://velog.io/@kgorae/%EC%9D%B4%EC%BD%94%ED%85%8C-%EC%B5%9C%EB%8B%A8-%EA%B2%BD%EB%A1%9C-%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B0%9C%EB%85%90

3장_파이썬
print
    print의 구분자 띄어쓰기 대신 다른것
    => print(a , b , c, sep=",")
    => a,b,c
    print의 list 출력->join 사용
    => a = [1, 2, 3]
    => print(' '.join(a))
    => 1 2 3
    

5장_리스트, 딕셔너리
    is와 ==의 차이
        is는 id() 값을 비교하는 함수이다.
        None은 값 자체가 정의되어있지 않아 ==로 비교 불가능 하기 때문에
        if a is None:으로 사용한다
        ==는 값 그 자체를 비교한다.
            a = [1,2,3]
            a == list(a) -> True
            a is list(a) -> False => 별도의 객체로 복사가 되기 때문에 다른 id를 갖게된다.  copy.deepCopy()로 복사해도 id가 다르기 때문에 ==를 사용해야한다.

    자료구조, 자료형, 추상 자료형
        자료구조    : 데이터에 효율적으로 접근하고 조작하기 위한 데이터의 조직, 관리, 저장 구조를 말한다ㅏ.
        자료형      : 컴파일러 또는 인터프리터에게 프로그래머가 데이터를 어떻게 사용하는지를 알려주는 일종의 데이터 속성이다.
        추상자료형  : ADT, 자료형에 대한 수학적 모델을 지칭. 추상화, 인터페이스만 보여주고 실제 구현은 보여주지 않는다. 


    딕셔너리 모듈
        collections.defaultdict = 없는 키 접근 시 KeyError 대신 디폴트 값 반환
        collections.Counter =  아이템에 대한 개수를 게산해 딕셔너리로 리턴한다
            a = [1,2,3,3,4,5,5,5]
            b = collections.Counter(a)
            b ==> Counter({5: 3, 3: 2, 1: 1 2: 2, 4: 1})
            b.most_common(2) ==> b에서 가장 빈도수가 높은 요소 두개까지 추출한다
                            ==> [(5,3), (3,2)]

6장_문자열 조작
    문자열의 문자|숫자 구분
    데이터.isalnum() -> 문자또는 숫자일 경우 true
    
    소문자와 숫자 제외 필터 정규식
        s = re.sub('[^a-z0-9]', '', s)
        s에서 a-z와0-9를 제외한 문자들을 공백으로 대체해 s에 삽입

    list 역으로 받을 때
        s[:] = s[::-1]로 하면 공간복잡도 O(1)도 통과가 가능하다.

    분리된 문자들 문자열로 합치기
        a = ["a","b","c"]
        '_'.join(a) => a_b_c

    sort()와 sorted()의 차이
    sort()는 리스트 내장 메소드로 제자리 정렬이다. 따라서 별도의 추가공간을 요구하지 않는다.
    sorted는 숫자, 문자열도 정렬이 가능하다. 문자열 정렬시 알파벳단위로 반환하기 때문에 ''.join(sorted(문자열))을 사용하면 정렬된 문자열을 반환받을 수 있다.

    sorted() 정렬 기준
        key 또는 별도 함수를 사용해 정렬 기준을 지정할 수 있다.
        sorted(array, key=len)
            len()함수의 반환 값을 기준으로 정렬하므로 글자수 기준 오름차순 정렬을 한다.

        key의 함수가 반환하는 값이 여러개 일 경우 정렬 조건을 중첩으로 적용이 가능하다

14장 트리
    그래프와 트리의 차이점
        = 트리는 순환 구조를 갖지 않는 그래프입니다.

    정 이진 트리
        모든 노드가 0개 또는 2개의 자식 노드를 갖는다.
    완전 이진 트리
        마지막 레벨을 제외하고 모든 레벨이 완전히 채워져 있으며, 마지막 레벨의 모든 노드는 가장 왼쪽부터 채워져 있다.
    포화 이진 트리
        모든 노드가 2개의 자식 노드를 갖고 있으며, 모든 리프 노드가 동일한 깊이 또는 레벨을 갖는다.
        문자 그대로, 가장 완벽한 유형의 트리이다.

15장 힙
    이진 힙과 이진 탐색 트리(BST)
        이진 힙
            상/하 관계를 보장하며, 최소힙에서는 부모가 자식보다 항상 작다.
            가장 큰/작은 값 추출 시 O(1)
            우선순위와 연관, 우선순위 큐에 활용
            가장 큰/작은 값을 추출하기 위해서 사용
        BST 
            좌/우 관계를 보장하며, 부모는 왼쪽 자식보다 크며, 오른쪽 자식보다는 작거나 같다.
            탐색과 삽입 모두 O(log n). 
            모든 값이 정렬되어야 할 때 사용.
    
    파이썬은 최소힙만 지원한다
        ->최대 힙을 사용하기 위해서는 값을 음수로 넣는다.

16 트라이
    트리와 비슷하지만 문자열을 저장하는데 사용

17 정렬
    안정 정렬 = 병합, 버블
        재정렬 시 순서가 유지되는 정렬
    불안정 정렬 = 퀵
        재정렬 시 순서가 유지되지 않는 정렬

    팀소트 = 병합 정렬과 삽입 정렬의 조합

    파이썬 콤마, 연산자
        a = [1]
        b = [2, 3]
        
            a += b
            -> [1, 2, 3]

            a += b,
            -> [1, [2, 3]]        
    
18 이진 검색
    any()와 all()함수
        any()는 포함된 값 중 어느 하나가 참이라면 항상 참으로 출력한다. ( OR )
            any([True, False, False]) => True
        all()은 모든 값이 참이여야 true를 출력한다.
            any([True, False, False]) => False